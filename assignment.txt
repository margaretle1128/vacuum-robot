CMPT 310. Winter 2024, Assignment # 1:

The goal in this assigment is to practice design and implementation of the common search algorithms for intelligent agents in typical environments. This assignment is provided in the form of a shell module and you are going to add or modify it to fullfill the following requirements. The parts that you will need to implement have printout comments saying "students to implement" or such. Once you have done that part, remove the print function. 
0- The code base distributed is a shell with all the mechanics been implemented. The code contains lots of comments and instruction. Read them carefully. They are part of the assignment description.
1-The environment setting is a 2D grid of rooms among which 5 are randomly set 'dirty' and there are random number of blocked rooms as well. The goal is to use various search algorithms to help the vacuuming robot to go around and clean rooms, as intelligently as possible based.
2-You are going to implement 5 searching algorithms: BF Graph, DF Graph, UC, Greedy, and A*. The tasks are basically to complete and implement all the algorithms. 
3-The way implementation works is that the path and explore list are computed when you select the search from the menu, and returned. Then using 'next' or 'run' you can step through the path, one step at a time. For 'run' the steps follow each other with a delay of 1 seconds automatically.
4-The agent starts from the middle of the grid. The next search is done for the next dirty room and so on, till all grid is clean.
5-Use the RomaniaMap Example as your guidancec through implementing the searches.
6-There is a button to enable "TurnCost". By default it is off (greyed). When enabled, each 90' turn of the agent will cost equivalent to 50% of cost of a move straight ahead to next door room. You need to implement this as last part of the assignment. 

-For each search result, the explored area will be colored pink, while the path will be colored orange.
-Number-of-steps and Performance labels at the top are updated as stepping through the path is performed. Number-of-steps should be measured from the start of the cleaning till the current location. This means this is a an accumulative cost as we go through all the dirty rooms. Similarly for the Performance label. 

-Each algorithms is worth 15% except the A* which is 20%. Part 6 (TurnCost) worth 10%. There is also 10% mark set aside for the analysis section bellow:

There are 2 items in the report analyse:
1- 5%: How does the turn-cost affects the path and the explored area for each search. To better see the effects feel free to play with the turncost factor, which currently set at 0.5.
2- 5%: Imagine it is going to cost twice as much to climb up the vertical than moving horizontal. How would you go about incorporating this into current implementation, and where and which functions would be affected? How many different ways this goal can be achieved and what are the benefits and weaknesses of each solution.